#+title: windows privesc


* introduction

this room covers fundamental techniques that can be used to elevate privileges in a Windows environment.


During a penetration test or a CTF, you will often find that obtaining an initial foothold on the target system is relatively easy. The challenge often arises during the privilege escalation phase. While some techniques require extensive enumeration of the target system, you may occasionally see a vulnerable kernel (the program that manages the entire operating system - you can find more information on kernels here)  or a file containing cleartext passwords. Elevating your privileges may sometimes require you to chain two or more vulnerabilities. 


Windows systems have different user privilege levels. Accounts can belong to regular users, who would only have enough privileges to log into the system. Some user levels you will most commonly see are listed below:

   * Administrator (local): This is the user with the most privileges.
   * Standard (local): These users can access the computer but can only perform limited tasks. Typically these users can not make permanent or essential changes to the system. 
   * Guest: This account gives access to the system but is not defined as a user. 
   * Standard (domain): Active Directory allows organizations to manage user accounts. A standard domain account may have local administrator privileges. 
   * Administrator (domain): Could be considered as the most privileged user. It can edit, create, and delete other users throughout the organization's domain. 

You may see some sources refer to "SYSTEM" as a privileged account. It is worth noting that "SYSTEM" is not an account in the proper sense. Windows and its services use the "SYSTEM" account to perform their tasks. Services installed on a Windows target system can use service accounts and will have a certain level of privilege, depending on the service using them. Service accounts do not allow you to log in but can be leveraged in other ways for privilege escalation.


Windows allows the system administrator to group users to facilitate their management. Any user can be a member of the "Administrator" group, giving it administrator rights on the system. 


Typically, privilege escalation will require you to follow a methodology similar to the one given below: 

   1) Enumerate the current user's privileges and resources it can access.
   2) If the antivirus software allows it, run an automated enumeration script such as winPEAS or PowerUp.ps1
   3) If the initial enumeration and scripts do not uncover an obvious strategy, try a different approach (e.g. manually go over a checklist like the one provided here)

Relying on automated scripts, manually enumerating the target system or a hybrid approach, whichever road you take, carefully read the output you see on the screen. The solution to your privilege escalation problem will often be printed there; you need to see it.


Vulnerable machines in this room were configured using a slightly modified version of Sagi Shahar's LPE setup script.

* Information Gathering


To decide on the privilege escalation method that has the most chances to work, you must conduct a thorough enumeration process. While privilege escalation may require a certain degree of trial and error, it is better to limit these. During a penetration test, spraying all known privilege escalation techniques onto the target may result in connection issues or unwanted reboots.


This room will cover different privilege escalation methods that can be used depending on the information gathered during the enumeration process. Some manual techniques that can be used to collect information on the target system are covered here. In the following task, we will cover a few automated tools that will speed up this process and allow you to uncover potential privilege escalation vectors more easily. However, it is essential to remember that automated scripts and tools can miss some important vectors. The ability to perform manual enumeration is an important skill to have in your arsenal.


** User Enumeration

Other users that can access the target system can reveal interesting information. A user account named “Administrator” can allow you to gain higher privileges, or an account called “test” can have a default or easy to guess password. Listing all users present on the system and looking at how they are configured can provide interesting information.


The following commands will help us enumerate users and their privileges on the target system.

Current user’s privileges: whoami /priv

List users: net users

List details of a user: net user username (e.g. net user Administrator)

Other users logged in simultaneously: qwinsta (the query session command can be used the same way) 

User groups defined on the system: net localgroup

List members of a specific group: net localgroup groupname (e.g. net localgroup Administrators)


** Collecting system information

The systeminfo  command will return an overview of the target system. On some targets, the amount of data returned by this command can be overwhelming, so you can always grep the output as seen below:


systeminfo | findstr /B /C:"OS Name" /C:"OS Version"


In a corporate environment, the computer name can also provide some idea about what the system is used for or who the user is. The hostname command can be used for this purpose. Please remember that if you have proceeded according to a proper penetration testing methodology, you probably know the hostname at this stage.


** Searching files

Configuration files of software installed on the target system can sometimes provide us with cleartext passwords. On the other hand, some computer users have the unsafe habit of creating and using files to remember their passwords (e.g. passwords.txt). Finding these files can shorten your path to administrative rights or even easy access to other systems and software on the target network.


The findstr command can be used to find such files in a format similar to the one given below:


findstr /si password *.txt


Command breakdown:

findstr: Searches for patterns of text in files.

/si: Searches the current directory and all subdirectories (s), ignores upper case / lower case differences (i)

password: The command will search for the string “password” in files

*.txt: The search will cover files that have a .txt extension


The string and file extension can be changed according to your needs and the target environment, but “.txt”, “.xml”, “.ini”, “*.config”, and “.xls” are usually a good place to start.


** Patch level

Microsoft regularly releases updates and patches for Windows systems. A missing critical patch on the target system can be an easily exploitable ticket to privilege escalation. The command below can be used to list updates installed on the target system.

wmic qfe get Caption,Description,HotFixID,InstalledOn


WMIC is a command-line tool on Windows that provides an interface for Windows Management Instrumentation (WMI). WMI is used for management operations on Windows and is a powerful tool worth knowing. WMIC can provide more information than just installed patches. For example, it can be used to look for unquoted service path vulnerabilities we will see in later tasks. WMIC is deprecated in Windows 10, version 21H1 and the 21H1 semi-annual channel release of Windows Server. For newer Windows versions you will need to use the WMI PowerShell cmdlet. More information can be found [[https://docs.microsoft.com/en-us/powershell/scripting/learn/ps101/07-working-with-wmi?view=powershell-7.1][here]].


** Network Connections

According to the most widely accepted methodologies, by this stage of the penetration testing process, you should already have conducted a comprehensive scan on the target system. In some cases, we see that some services run locally on a system and can only be accessible locally. System Administrators that lack basic cyber security knowledge tend to be laxer when setting services that are only accessible over the system (e.g. only responding to requests sent to 127.0.0.1). As we have access to the target system, such services can provide a ticket to a higher privileged user.


The netstat command can be used to list all listening ports on the target system. The netstat -ano command will return an output similar to the one listed below:
Output of the Netstat Command

           
C:\Users\user\Desktop>netstat -ano

Active Connections

  Proto  Local Address          Foreign Address        State           PID
  TCP    0.0.0.0:135            0.0.0.0:0              LISTENING       68
  TCP    0.0.0.0:445            0.0.0.0:0              LISTENING       4
  TCP    0.0.0.0:3389           0.0.0.0:0              LISTENING       1092
  TCP    0.0.0.0:5985           0.0.0.0:0              LISTENING       4
  TCP    0.0.0.0:47001          0.0.0.0:0              LISTENING       4
  TCP    0.0.0.0:49664          0.0.0.0:0              LISTENING       660
  TCP    0.0.0.0:49665          0.0.0.0:0              LISTENING       1348
  TCP    0.0.0.0:49666          0.0.0.0:0              LISTENING       1636
  TCP    0.0.0.0:49667          0.0.0.0:0              LISTENING       2288
  TCP    0.0.0.0:49668          0.0.0.0:0              LISTENING       2468
  TCP    0.0.0.0:49671          0.0.0.0:0              LISTENING       780
  TCP    0.0.0.0:49681          0.0.0.0:0              LISTENING       788

        


The command above can be broken down as follows;

    -a: Displays all active connections and listening ports on the target system.
    -n: Prevents name resolution. IP Addresses and ports are displayed with numbers instead of attempting to resolves names using DNS.
    -o: Displays the process ID using each listed connection.

Any port listed as “LISTENING” that was not discovered with the external port scan can present a potential local service.


If you uncover such a service, you can try port forwarding to connect and potentially exploit it. The port forwarding process will allow tunnelling your connection over the target system, allowing you to access ports and services that are unreachable from outside the target system. We will not cover port forwarding as it is beyond the scope of this room.


** Scheduled Tasks

Some tasks may be scheduled to run at predefined times. If they run with a privileged account (e.g. the System Administrator account) and the executable they run can be modified by the current user you have, an easy path for privilege escalation can be available.


The schtasks command can be used to query scheduled tasks.

schtasks /query /fo LIST /v


** Drivers

Drivers are additional software installed to allow the operating system to interact with an external device. Printers, web cameras, keyboards, and even USB memory sticks can need drivers to run. While operating system updates are usually made relatively regularly, drivers may not be updated as frequently. Listing available drivers on the target system can also present a privilege escalation vector. The driverquery command will list drivers installed on the target system. You will need to do some online research about the drivers listed and see if any presents a potential privilege escalation vulnerability.


** Antivirus

While you will seldom face an antivirus in CTF events, a real-world penetration testing engagement will often require you to deal with some form of antivirus. Various reasons will cause an antivirus to miss your shell access without you trying to evade it. For example, the antivirus software will not detect your presence if you have accessed the target system without using a trojan (e.g. using credentials and connect over RDP). However, to reach a higher privilege level, you may need to run scripts or other tools on the target system. It is, therefore, good practice to check if any antivirus is present.


Typically, you can take two approaches: looking for the antivirus specifically or listing all running services and checking which ones may belong to antivirus software.


The first approach may require some research beforehand to learn more about service names used by the antivirus software. For example, the default antivirus installed on Windows systems, Windows Defender’s service name is windefend. The query below will search for a service named “windefend” and return its current state.

sc query windefend


While the second approach will allow you to detect antivirus software without prior knowledge about its service name, the output may be overwhelming.

sc queryex type=service



You can connect to the target machine using RDP on your attacking machine or launching it directly from your browser.


(how to connect through RDP)

xfreerdp /dynamic-resolution +clipboard /cert:ignore /v:IP_ADDRESS /u:USERNAME /p:'PASSWORD'

The credentials are as follows:

Username: user

Password: Password1


NOTE: The machine attached to this task is the same as the one used in task 4.


* Tools of the Trade

 Several scripts exist to conduct system enumeration in ways similar to the ones seen in the previous task. These tools can shorten the enumeration process time and uncover different potential privilege escalation vectors. However, please remember that automated tools can sometimes miss privilege escalation. While real penetration testing engagements may have targets where no known privilege escalation technique works, in CTFs, if the initial result does not return anything useful, try a different approach.


Below are a few tools commonly used to identify privilege escalation vectors.


** WinPEAS
WinPEAS is a script developed to enumerate the target system to uncover privilege escalation paths. You can find more information about winPEAS and download either the precompiled executable or a .bat script. Please note, Windows Defender detects and disables winPEAS. WinPEAS will run commands similar to the ones listed in the previous task and print their output. The output from winPEAS can be lengthy and sometimes difficult to read. This is why it would be good practice to always redirect the output to a file, as shown below:

winpeas.exe > outputfile.txt


WinPEAS can be downloaded [[https://github.com/carlospolop/PEASS-ng/tree/master/winPEAS][here]].



** PowerUp


PowerUp is a PowerShell script that searches common privilege escalation on the target system. You can run it with the Invoke-AllChecks option that will perform all possible checks on the target system or use it to conduct specific checks (e.g. the Get-UnquotedService option to only look for potential unquoted service path vulnerabilities).


PowerUp can be downloaded [[https://github.com/PowerShellMafia/PowerSploit/tree/master/Privesc][here]].


Reminder: To run PowerUp on the target system, you may need to bypass the execution policy restrictions. To achieve this, you can launch PowerShell using the command below.


Running PowerUp.ps1 on the Target System

           
C:\Users\user\Desktop>powershell.exe -nop -exec bypass
Windows PowerShell
Copyright (C) Microsoft Corporation. All rights reserved.

PS C:\Users\user\Desktop> Import-Module .\PowerUp.ps1
PS C:\Users\user\Desktop> Invoke-AllChecks

[*] Running Invoke-AllChecks


[*] Checking if user is in a local group with administrative privileges...

        


** Windows Exploit Suggester

Some exploit suggesting scripts (e.g. winPEAS) will require you to upload them to the target system and run them there. This may cause antivirus software to detect and delete them. To avoid making unnecessary noise that can attract attention, you may prefer to use Windows Exploit Suggester, which will run on your attacking machine (e.g. Kali or TryHackMe AttackBox).


Windows Exploit Suggester is a Python script that can be found and downloaded [[https://github.com/AonCyberLabs/Windows-Exploit-Suggester][here]]


Once installed, and before you use it, type the windows-exploit-suggester.py –update command to update the database. The script will refer to the database it creates to check for missing patches that can result in a vulnerability you can use to elevate your privileges on the target system.


To use the script, you will need to run the systeminfo command on the target system. Do not forget to direct the output to a .txt file you will need to move to your attacking machine.


Once this is done, windows-exploit-suggester.py can be run as follows;

windows-exploit-suggester.py --database 2021-09-21-mssb.xls --systeminfo sysinfo_output.txt


A newer version of Windows Exploit Suggester is available [[https://github.com/AonCyberLabs/Windows-Exploit-Suggester][here]]. Depending on the version of the target system, using the newer version could be more efficient.


** Metasploit

If you already have a Meterpreter shell on the target system, you can use the multi/recon/local_exploit_suggester module to list vulnerabilities that may affect the target system and allow you to elevate your privileges on the target system.


NOTE: These tools are available on AttackBox. Download them only if you are connecting over VPN. Tools you will most commonly use during privilege escalation are included in the zip file attached to this task. Some of these can be identified by antivirus software as malicious and be deleted when moved to your host computer. 
